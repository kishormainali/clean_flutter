type Token {
  accessToken: String
  accessTokenExpiresIn: DateTime
  refreshToken: String
  refreshTokenExpiresIn: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserRespInEmailLogin {
  _id: String
  authProvider: String
  authProviderId: String
  firstName: String
  lastName: String
  phoneNumber: String
  isTemporaryPassword: Boolean
  displayImage: String
  hasUnreadNotification: Boolean
}

type CometChatAuthToken {
  uid: String!
  authToken: String!
  createdAt: Float!
}

type LoginWithEmailResponse {
  message: String
  user: UserRespInEmailLogin
  token: Token!
  userType: String!
  cometChatAuthToken: CometChatAuthToken
}

type AgentType {
  _id: String!
  email: String!
  status: String!
  isDeleted: Boolean
  isTemporaryPassword: Boolean
  role: String!
  agencyId: String
  hasUnreadNotification: String
}

type AgentLoginResponse {
  message: String
  agent: AgentType!
  token: Token!
  cometChatAuthToken: CometChatAuthToken
  userType: String!
}

type UserRespInAppleLogin {
  _id: String
  email: String
  loginType: String
  hasUnreadNotification: String
}

type LoginWithAppleResponse {
  message: String
  user: UserRespInAppleLogin
  token: Token!
  cometChatAuthToken: CometChatAuthToken
}

type MessageResponse {
  message: String
}

type VerificationCodeExpiry {
  expiresByInMilliSec: Float!
  expiresAt: DateTime!
}

type RegisterWithEmailResponse {
  message: String!
  expiry: VerificationCodeExpiry
}

type UserRespInLogin {
  _id: String
  email: String
  loginType: String
  hasUnreadNotification: String
}

type LoginResponse {
  message: String
  user: UserRespInLogin
  token: Token!
}

type VerifyEmailResponse {
  message: String
  user: UserRespInLogin
  token: Token!
  cometChatAuthToken: CometChatAuthToken
}

type ForgotPasswordVerificationExpiry {
  expiresByInMilliSec: Float!
  expiresAt: DateTime!
}

type ForgotPasswordResponse {
  message: String!
  expiry: ForgotPasswordVerificationExpiry
}

type CoordinatesResponse {
  lat: Float!
  long: Float!
}

type AddressResponse {
  displayAddress: String!
  coordinates: CoordinatesResponse!
}

type UserInProfileUpdate {
  _id: String!
  authProvider: String
  authProviderId: String
  firstName: String
  lastName: String
  address: AddressResponse
}

type ProfileUpdateResponse {
  message: String
  user: UserInProfileUpdate
}

type VerificationExpiry {
  expiresByInMilliSec: Float!
  expiresAt: DateTime!
}

type OTPResponse {
  message: String!
  expiry: VerificationExpiry
}

type UserRespInFacebookLogin {
  _id: String
  email: String
  loginType: String
  hasUnreadNotification: String
}

type LoginWithFacebookResponse {
  message: String
  user: UserRespInFacebookLogin
  token: Token!
  cometChatAuthToken: CometChatAuthToken
}

type UserRespInGoogleLogin {
  _id: String
  email: String
  loginType: String
  hasUnreadNotification: String
}

type LoginWithGoogleResponse {
  message: String
  user: UserRespInGoogleLogin
  token: Token!
  cometChatAuthToken: CometChatAuthToken
}

type Word {
  _id: String!
  name: String!
}

type WordResponse {
  data: [Word!]!
}

type AgentDetails {
  agencyId: String
  agentId: String!
  agentName: String!
  agentImage: String
  agencyLogo: String
  agentContactNumber: String
}

type Location {
  type: String
  coordinates: [Float!]!
}

type Address {
  displayAddress: String!
  suburb: String!
  state: String!
  country: String!
  postalCode: String!
  location: Location!
}

type Stats {
  views: Float
  saves: Float
  inspection: Float
  reviews: Float
  enquiry: Float
}

type PropertyDetails {
  bed: Float
  bath: Float
  car: Float
  pool: Float
}

type AuctionDateResponse {
  date: DateTime!
  startTime: String!
  endTime: String
}

type PaginationType {
  total: Float!
  hasNextPage: Boolean!
}

type InspectionDateResponse {
  _id: String
  date: DateTime!
  startTime: String!
  endTime: String
}

type Property {
  _id: String!
  name: String
  listingType: String!
  property: String!
  type: String
  saleType: String!
  subSaleType: String
  images: [String!]
  price: Float
  minPrice: Float
  maxPrice: Float
  showPrice: Boolean
  priceUnit: String
  details: PropertyDetails
  stats: Stats
  agentDetails: AgentDetails
  address: Address
  status: String
  landSize: Float
  featureWords: [String!]
  lifeStyleWords: [String!]
  propertyType: [String!]
  auctionDate: AuctionDateResponse
  isSaved: Boolean
  soldPrice: Float
  showSoldPrice: Boolean
  totalAverageRatings: Float
  locationImage: String
  isInspectionByAppointment: Boolean
  cometChatBuyerGroupId: String
  likedBy: [String!]
}

type PropertyListResponse {
  data: [Property!]!
  pagination: PaginationType!
}

type AgencyPropertyListResponse {
  data: [Property!]!
  pagination: PaginationType!
  agencyName: String!
}

type EarlyBirdPropertyListResponse {
  data: [Property!]!
  pagination: PaginationType!
}

type PropertyListMapResponse {
  data: [Property!]!
}

type PropertyDetail {
  _id: String!
  name: String
  listingType: String!
  property: String!
  type: String
  saleType: String!
  subSaleType: String
  images: [String!]
  price: Float
  minPrice: Float
  maxPrice: Float
  showPrice: Boolean
  priceUnit: String
  details: PropertyDetails
  stats: Stats
  agentDetails: AgentDetails
  address: Address
  status: String
  landSize: Float
  featureWords: [String!]
  lifeStyleWords: [String!]
  propertyType: [String!]
  auctionDate: AuctionDateResponse
  isSaved: Boolean
  soldPrice: Float
  showSoldPrice: Boolean
  totalAverageRatings: Float
  locationImage: String
  isInspectionByAppointment: Boolean
  cometChatBuyerGroupId: String
  likedBy: [String!]
  description: String
  inspectionDates: [InspectionDateResponse!]
  availableFrom: DateTime
  floorPlanUrl: String
  agentPriceGuideUrl: String
  videoUrl: String
  buildingSize: Float
  isVacant: Boolean
  isTenated: Boolean
  isPetAllowed: Boolean
  isFurnished: Boolean
  councilZoning: String
  straNumber: String
}

type PropertyDetailResponse {
  data: PropertyDetail!
}

type PropertySetting {
  status: String!
}

type PropertySettingResponse {
  data: PropertySetting!
}

type AddPropertyResponse {
  message: String
  propertyId: String!
}

type PropertyListCountResponse {
  totalCommercial: Float
  totalResidential: Float
  totalHolidayLetting: Float
}

type PropertyTypeData {
  type: String!
  properties: [Property!]!
}

type PropertyListWithTypeResponse {
  data: [PropertyTypeData!]!
}

type InspectionDetails {
  date: DateTime
  startTime: String
  endTime: String
}

type AddInspectionDetail {
  date: DateTime
  startTime: String
  endTime: String
  _id: String
}

type InspectionDetailsList {
  data: [InspectionDetails!]
}

type AddInspectionDetailsResponse {
  message: String
  data: [AddInspectionDetail!]
}

type CheckInDetails {
  buyerId: String
  firstName: String!
  lastName: String
  checkInDateTime: DateTime
  displayImage: String
}

type CheckInDetailsList {
  data: [CheckInDetails!]!
  pagination: PaginationType!
}

type ReviewOption {
  _id: String!
  title: String!
}

type PricingEstimation {
  minimum: Float!
  maximum: Float!
}

type ReviewSetting {
  _id: String!
  options: [ReviewOption!]!
  type: String!
  characterLimit: Float!
  pricingEstimation: PricingEstimation!
}

type ReviewSettingResponse {
  data: ReviewSetting!
}

type Rating {
  title: String!
  ratings: Float!
  reviewOptionId: String!
}

type ReviewData {
  _id: String!
  description: String!
  reviewerFirstName: String!
  createdAt: DateTime!
  pricingEstimate: Float!
  reviews: [Rating!]!
}

type ReviewResponse {
  data: [ReviewData!]!
  pagination: PaginationType!
}

type EnquiryBuyer {
  _id: String!
  propertyId: String!
  propertyAddress: String!
  agentId: String!
  agentImage: String
  agentName: String!
  lastSentMessage: String
  lastMessageSentBy: String
  buyerImage: String
  buyerId: String
  buyerName: String
}

type EnquiryBuyerResponse {
  data: [EnquiryBuyer!]!
  pagination: PaginationType!
}

type GroupedEnquiry {
  _id: String!
  propertyName: String!
  propertyAddress: String
  propertyImage: String
  count: Float!
}

type GroupedResponse {
  data: [GroupedEnquiry!]!
  pagination: PaginationType!
}

type EnquiryPropertyResponse {
  _id: String
  lastSentMessage: String
  lastMessageSentBy: String
  buyerImage: String
  buyerId: String
  buyerName: String
  propertyAddress: String
}

type EnquiriesPropertyResponse {
  data: [EnquiryPropertyResponse!]!
  pagination: PaginationType!
}

type CometChat {
  agentId: String!
  buyerId: String!
  propertyId: String!
  cometGroupId: String!
}

type CometChatGroup {
  agentId: String!
  propertyId: String!
  propertyName: String
  propertyAddress: String!
  propertyImage: String
  newEnquiryCount: Float!
}

type CometChatGroupResponse {
  data: [CometChatGroup!]
  pagination: PaginationType!
}

type CometChatResponse {
  data: CometChat
}

type AddEnquiryResponse {
  message: String
  cometChatGroupId: String!
}

type Collection {
  _id: String
  title: String!
  thumbnailUrl: String
}

type CollectionResponse {
  data: [Collection!]!
  message: String!
}

type SavedSearchAddressResponse {
  displayAddress: String!
  suburb: String!
  stateFullName: String!
  stateShortName: String!
  country: String!
  postalCode: Float!
  latitude: Float!
  longitude: Float!
}

type SavedSearchFilter {
  _id: String!
  title: String!
  property: String
  saleType: String
  subSaleType: String
  showOnlySold: Boolean
  showOnlyLeased: Boolean
  minPrice: Float
  maxPrice: Float
  priceUnit: String
  includeUnderContract: Boolean
  bed: Float
  bath: Float
  car: Float
  minLandSize: Float
  maxLandSize: Float
  featureWords: [String!]
  lifeStyleWords: [String!]
  propertyType: [String!]
  minBuildingSize: Float
  maxBuildingSize: Float
  isPetAllowed: Boolean
  isFurnished: Boolean
  pool: Boolean
  address: [SavedSearchAddressResponse!]
}

type SavedSearchFilterResponse {
  data: [SavedSearchFilter!]!
  pagination: PaginationType!
}

type SignedUrlResponse {
  link: String!
}

type CmsPageResponse {
  _id: String!
  title: String!
  slug: String!
  content: String!
}

type SubscriptionResponse {
  subscriptionId: String
  status: String
  agencyId: String
  collection_method: String
  billing_cycle_anchor: DateTime
  customer: String
  default_payment_method: String
  cancel_at_period_end: String
  current_period_end: DateTime
  current_period_start: DateTime
  cancel_at: DateTime
  canceled_at: DateTime
  start_date: DateTime
  ended_at: DateTime
  latest_invoice: String
  days_until_due: Float
  schedule: String
}

type NotificationSetting {
  message: Boolean
  property: Boolean
}

type SubscriptionError {
  title: String
  message: String
}

type AgentDetail {
  _id: String!
  agentImage: String
  agencyLogo: String
  agencyName: String
  firstName: String
  lastName: String
  phoneNumber: String!
  email: String
  notificationSetting: NotificationSetting
  hasUnreadNotification: Boolean
  subscription: SubscriptionResponse
  subscriptionError: SubscriptionError
}

type AgentDetailResponse {
  message: String!
  agent: AgentDetail!
}

type DashboardInfo {
  residential: Float!
  commercial: Float!
  other: Float!
  agencyName: String!
  agencyLogo: String!
  agencyAddress: String!
  contactNumber: String!
  totalBuyers: Float!
  totalSold: Float!
  totalRentalEnquiries: Float!
}

type DashboardResponse {
  data: DashboardInfo!
}

type PricingOption {
  salePost: Float
  rentPost: Float
  holidayLettings: Float
}

type AgentSubscriptionsettingsDetail {
  _id: String!
  agencyId: String
  commencementDate: DateTime
  billingCycle: String
  residentialPricing: PricingOption
  commercialPricing: PricingOption
  relistingPricing: PricingOption
  autoCharge: Boolean
  productId: String
  priceId: String
  fee: Float
}

type BuyerProfile {
  _id: String!
  firstName: String
  lastName: String
  displayImage: String
  phoneNumber: String
  qrCode: String
  authProvider: String
  authProviderId: String
}

type BuyerProfileResponse {
  data: BuyerProfile!
}

type BuyerDetailNotificationSetting {
  message: Boolean
  property: Boolean
}

type BuyerDetail {
  _id: String!
  firstName: String
  lastName: String
  displayImage: String
  phoneNumber: String
  qrCode: String
  authProvider: String
  authProviderId: String
  notificationSetting: BuyerDetailNotificationSetting
  hasUnreadNotification: Boolean
}

type CometChatAuthTokenBuyer {
  uid: String!
  authToken: String!
  createdAt: Float!
}

type CometChatAuthResponse {
  data: CometChatAuthTokenBuyer
}

type PreSignedUrl {
  key: String!
  url: String!
}

type PreSignedUrlResponse {
  data: PreSignedUrl!
}

type ImageResponse {
  url: String!
}

type Pagination {
  total: Float!
  hasNextPage: Boolean!
}

type Notification {
  _id: String!
  notificationTokenId: String
  title: String
  body: String
  createdBy: String
  status: String
  isRead: Boolean
  type: String
  cometChatGroupId: String
  property: Property
}

type NotificationsResponse {
  message: String
  pagination: PaginationType!
  notification: Notification
  notifications: [Notification!]
}

type NotificationTokenResponse {
  _id: String
  userId: String
  deviceType: String
  notificationToken: String
  createdBy: String
  status: String
}

type SettingsResponse {
  _id: String!
  dynamicLink: String!
}

type Query {
  getSettings: SettingsResponse!
  getNotifications(notificationsFilter: NotificationsFilter!): NotificationsResponse
  sendNotifications: NotificationsResponse
  getMyProfileBuyer: BuyerProfileResponse!
  getMyProfileDetailBuyer: BuyerDetail!
  getCometChatToken: CometChatAuthResponse!
  getPutPresignedUrl(input: PreSignedInput!): PreSignedUrlResponse!
  sendNotification: String!
  getSignedThumbnailUrlForBuyer(input: GetThumbnailInput!): ImageResponse!
  getCmsPageBySlug(body: GetCmsPage!): CmsPageResponse!
  getFeatureWords(body: WordInput!): WordResponse!
  getLifestyleWords(body: WordInput!): WordResponse!
  getPropertyType(body: WordInput!): WordResponse!
  getPropertyListForBuyer(body: BuyerPropertyListInput!): PropertyListResponse!
  getPropertyListForBuyerInElasticSearch(body: BuyerPropertyListInput!): PropertyListResponse!
  getSimilarPropertyListForBuyer(body: SimilarPropertyInput!): PropertyListResponse!
  getPropertyListForMap(body: BoxCoordinatesInput!): PropertyListMapResponse!
  getPropertyListForMapInElasticSearch(body: BoxCoordinatesInput!): PropertyListMapResponse!
  getPropertyDetailsForBuyer(body: PropertyDetailInput!): PropertyDetailResponse!
  getPropertyDetailsForAgent(body: PropertyDetailInput!): PropertyDetailResponse!
  getBuyerPropertyListCount: PropertyListCountResponse!
  getAgentsPropertyList(body: PropertyListInput!): PropertyListResponse!
  getMyAgencyPropertyList(body: PropertyListInput!): AgencyPropertyListResponse!
  getMyAgencyEarlyBirdPropertyList(body: PaginationInput!): AgencyPropertyListResponse!
  getAgentsEarlyBirdPropertyList(body: PaginationInput!): EarlyBirdPropertyListResponse!
  getBuyerEarlyBirdPropertyList(body: PaginationInput!): EarlyBirdPropertyListResponse!
  getPropertySetting(body: PropertySettingInput!): PropertySettingResponse!
  listPropertiesWithType: PropertyListWithTypeResponse!
  viewInspectionForAgent(input: ViewInspectionInput!): InspectionDetailsList!
  agentCheckInDetailsListing(input: CheckInListInputDTO!): CheckInDetailsList!
  getReviewSettings(input: ReviewSettingInput!): ReviewSettingResponse!
  getReviews(input: ReviewInput!): ReviewResponse!
  getReviewsForAgent(input: ReviewInput!): ReviewResponse!
  getEnquiryForBuyer(input: PaginationInput!): EnquiryBuyerResponse!
  getEnquiryForAgent(input: AgenyEnquiryInput!): EnquiryBuyerResponse!
  getEnquiryGroupedByProperty(input: PaginationInput!): GroupedResponse!
  getEnquiriesForSpecificProperty(input: AgenyEnquiryInput!): EnquiriesPropertyResponse!
  checkGroupForEnquiry(input: CheckEnquiryGroupInput!): CometChatResponse!
  getEnquiriesGroupedForAgent(input: EnquiryGroupedInput!): CometChatGroupResponse!
  getSavedPropertyInACollection(input: SavedPropertyInput!): PropertyListResponse!
  getSavedPropertyInACollectionMap(input: SavedPropertyMapInput!): PropertyListMapResponse!
  getAllCollections(input: GetAllCollectionInput!): CollectionResponse!
  getSavedSearchFilter(input: PaginationInput!): SavedSearchFilterResponse!
  getSignedUrlForBuyer(input: GetSignedUrlDTO!): SignedUrlResponse!
  getMyProfile: AgentDetailResponse!
  getMyProfileDetailAgent: AgentDetail!
  getDashboardInfo: DashboardResponse!
  getAgencySubscriptionDetail: AgentSubscriptionsettingsDetail!
  currentSubscription: AgentDetail!
  authenticatedUser: MessageResponse!
}

input NotificationsFilter {
  skip: Float!
  limit: Float!
  isread: Boolean
}

input PreSignedInput {
  key: String!
  contentType: String!
}

input GetThumbnailInput {
  key: String!
  size: String!
}

input GetCmsPage {
  slug: String!
}

input WordInput {
  searchKey: String
  type: PropertyEnum!
}

enum PropertyEnum {
  commercial
  residential
  holidayLetting
}

input BuyerPropertyListInput {
  pagination: PaginationInput!
  filter: FilterInput
  searchOption: [SearchPropertyInput!]
  sortOption: SortOptionInput
  includeSurroundingSuburb: Boolean!
}

input PaginationInput {
  skip: Float!
  limit: Float!
}

input FilterInput {
  property: PropertyEnum
  saleType: SaleTypeEnum
  subSaleType: SubSaleTypeEnum
  showOnlySold: Boolean
  showOnlyLeased: Boolean
  minPrice: Float
  maxPrice: Float
  priceUnit: PriceUnitEnum
  includeUnderContract: Boolean
  bed: Float
  bath: Float
  car: Float
  minLandSize: Float
  maxLandSize: Float
  featureWords: [String!]
  lifeStyleWords: [String!]
  propertyType: [String!]
  minBuildingSize: Float
  maxBuildingSize: Float
  isPetAllowed: Boolean
  isFurnished: Boolean
  pool: Boolean
}

enum SaleTypeEnum {
  sale
  rent
}

enum SubSaleTypeEnum {
  offersInvited
  auction
  expressionOfInterest
  contactAgent
  tender
}

enum PriceUnitEnum {
  pw
  pd
  pm
  pa
  pn
}

input SearchPropertyInput {
  latitude: Float!
  longitude: Float!
  suburb: String
  stateShortName: String
  stateFullName: String
}

input SortOptionInput {
  sortBy: SortByEnum!
  sortOrder: SortOrderEnum!
}

enum SortByEnum {
  createdAt
  price
  inspectionDates
  auctionDate
}

enum SortOrderEnum {
  asc
  desc
}

input SimilarPropertyInput {
  pagination: PaginationInput!
  propertyId: String!
  tabOption: SimilarPropertyEnum
}

enum SimilarPropertyEnum {
  sale
  rent
  sold
}

input BoxCoordinatesInput {
  bottomLeftLongitude: Float!
  bottomLeftLatitude: Float!
  topRightLongitude: Float!
  topRightLatitude: Float!
  filter: FilterInput
}

input PropertyDetailInput {
  propertyId: String!
}

input PropertyListInput {
  pagination: PaginationInput!
  filter: FilterInput
}

input PropertySettingInput {
  propertyId: String!
}

input ViewInspectionInput {
  propertyId: String!
}

input CheckInListInputDTO {
  skip: Float!
  limit: Float!
  propertyId: String!
}

input ReviewSettingInput {
  propertyType: PropertyEnum!
}

input ReviewInput {
  propertyId: String!
  paginationOption: PaginationInput!
  sortOption: SortOption
}

input SortOption {
  sortBy: ReviewSortByEnum!
  sortOrder: ReviewSortOrderEnum!
}

enum ReviewSortByEnum {
  pricingEstimate
  ratings
  createdAt
}

enum ReviewSortOrderEnum {
  asc
  desc
}

input AgenyEnquiryInput {
  propertyId: String
  pagination: PaginationInput!
}

input CheckEnquiryGroupInput {
  propertyId: String!
}

input EnquiryGroupedInput {
  pagination: PaginationInput!
}

input SavedPropertyInput {
  collectionId: String
  pagination: PaginationInput!
}

input SavedPropertyMapInput {
  collectionId: String
  bottomLeftLongitude: Float!
  bottomLeftLatitude: Float!
  topRightLongitude: Float!
  topRightLatitude: Float!
}

input GetAllCollectionInput {
  includeAllSaved: Boolean!
}

input GetSignedUrlDTO {
  size: String
  key: String!
}

type Mutation {
  createNotification(input: NotificationsTokenDto!): NotificationTokenResponse!
  disableNotification(input: DisableNotificationsTokenDto!): String!
  deleteNotification(id: String!): String!
  updateNotificationSetting(input: NotificationsSettingDto!): String!
  updateNotification(input: NotificationsDto!): String!
  updateMyProfileBuyer(input: BuyerProfileInput!): MessageResponse!
  updateBuyerHasUnreadNotification(hasUnreadNotification: Boolean!): BuyerDetail!
  deleteMyAccountBuyer: MessageResponse!
  addContactUsForAgent(input: ContactUsInputDTO!): MessageResponse!
  addReportFormForAgent(input: ReportInputDTO!): MessageResponse!
  reportUser(input: ReportUserDTO!): MessageResponse!
  createCmsPage(body: CreateCmsPageInput!): CmsPageResponse!
  addProperty(input: AddPropertyInput!): AddPropertyResponse!
  addEarlyBirdProperty(input: AddEarlyBirdInput!): MessageResponse!
  updateEarlyBirdProperty(input: UpdateEarlyBirdInput!): MessageResponse!
  updateProperty(input: UpdatePropertyInput!): MessageResponse!
  updatePropertyDescription(input: UpdatePropertyDescriptionInput!): MessageResponse!
  updatePropertySetting(body: UpdatePropertySettingInput!): MessageResponse!
  addOrUpdateInspection(input: InspectionDateInput!): AddInspectionDetailsResponse!
  removeInspectionDate(input: RemoveInspectionDateInput!): MessageResponse!
  addBuyerCheckIn(input: AddBuyerCheckInInput!): MessageResponse!
  reviewProperty(input: PropertyReviewInput!): MessageResponse!
  enquiryProperty(input: EnquiryInput!): AddEnquiryResponse!
  createGroupForEnquiry(input: EnquiryGroupInput!): MessageResponse!
  markPropertyEnquiryAsSeen(input: CheckEnquiryGroupInput!): MessageResponse!
  decreaseEnquiryCount(input: IdInput!): MessageResponse!
  saveProperty(input: SavePropertyInput!): MessageResponse!
  removeSavedProperty(input: RemoveSavedPropertyInput!): MessageResponse!
  addUpdateCollection(input: CollectionInput!): CollectionResponse!
  removeCollection(input: RemoveCollectionInput!): MessageResponse!
  saveSearchFilter(input: SaveSearchFilterInput!): MessageResponse!
  deleteSaveSearchFilter(input: DeleteSavedSearchInput!): MessageResponse!
  changeAgentPassword(input: AgentChangePasswordInput!): AgentDetailResponse!
  updateAgentProfile(body: AgentUpdateInput!): AgentDetailResponse!
  updateAgentHasUnreadNotification(hasUnreadNotification: Boolean!): AgentDetail!
  saveDeviceInfo(body: DeviceInfoInput!): MessageResponse!
  logout(deviceId: String): MessageResponse!
  logoutAll: MessageResponse!
  registerBuyerWithEmail(body: EmailSignupOTPInput!): RegisterWithEmailResponse!
  verifyEmail(body: VerifyEmailInput!): VerifyEmailResponse!
  setPassword(password: String!): MessageResponse!
  loginAsABuyer(body: LoginEmailPasswordInput!): LoginWithEmailResponse!
  loginAsAnAgent(body: LoginEmailPasswordInput!): AgentLoginResponse!
  changePassword(body: ChangePasswordInput!): MessageResponse!
  updateProfile(body: UpdateUserProfile!): ProfileUpdateResponse!
  forgotPassword(body: ForgotPasswordInput!): ForgotPasswordResponse!
  verifyResetPasswordOTP(body: VerifyResetPasswordOtpInput!): MessageResponse!
  resetPassword(body: ResetPasswordInput!): MessageResponse!
  refresh(refreshToken: String!): Token!
  resendEmailOTP(body: RequestLoginOTPInput!): OTPResponse!
  loginWithFacebook(accessToken: String!, deviceId: String!): LoginWithFacebookResponse!
  loginWithFacebookGoogleWeb(email: String!, id: String, name: String, authProviderType: AuthProviderType!): LoginWithFacebookResponse!
  loginWithGoogle(idToken: String!, deviceId: String!): LoginWithGoogleResponse!
  requestPhoneLoginOTP(body: RequestPhoneLoginOTPInput!): OTPResponse!
  phoneLoginWithOTP(body: PhoneLoginWithOTPInput!): LoginResponse!
  loginWithApple(idToken: String!, deviceId: String!): LoginWithAppleResponse!
}

input NotificationsTokenDto {
  deviceType: String!
  notificationToken: String!
  deviceId: String!
}

input DisableNotificationsTokenDto {
  deviceId: String!
}

input NotificationsSettingDto {
  userType: UserTypeEnum!
  notificationType: NotificationTypeEnum!
  notificationValue: Boolean! = true
}

enum UserTypeEnum {
  agent
  buyer
}

enum NotificationTypeEnum {
  property
  message
}

input NotificationsDto {
  id: String
  title: String
  notificationTokenId: String
  body: String
  createdBy: String
  status: String
  isRead: Boolean
}

input BuyerProfileInput {
  firstName: String!
  lastName: String!
  displayImage: String
  phoneNumber: String!
}

input ContactUsInputDTO {
  message: String!
}

input ReportInputDTO {
  subject: String!
  reason: String!
}

input ReportUserDTO {
  details: String!
  reason: String!
  reportedUserId: String!
  reportedUserType: ReportedUserType!
  propertyId: String!
}

enum ReportedUserType {
  AGENT
  BUYER
}

input CreateCmsPageInput {
  title: CmsTitle!
  content: String
}

enum CmsTitle {
  TERMS_AND_CONDITION
  PRIVACY_POLICY
  TERMS_AND_CONDITION_AGENT
  PRIVACY_POLICY_AGENT
}

input AddPropertyInput {
  name: String
  description: String!
  listingType: ListingTypeEnum!
  property: PropertyEnum!
  saleType: SaleTypeEnum!
  subSaleType: SubSaleTypeEnum
  type: String!
  address: AddressType!
  videoUrl: String
  images: [String!]
  price: Float
  minPrice: Float
  maxPrice: Float
  showPrice: Boolean!
  priceUnit: PriceUnitEnum
  inspectionDates: [InspectionDate!]
  isInspectionByAppointment: Boolean
  auctionDate: AuctionDate
  landSize: Float
  buildingSize: Float
  featureWords: [String!]!
  lifeStyleWords: [String!]!
  propertyType: [String!]!
  isVacant: Boolean
  isTenated: Boolean
  isPetAllowed: Boolean!
  isFurnished: Boolean!
  bed: Float
  bath: Float
  car: Float
  pool: Float
  agentPriceGuideUrl: String
  councilZoning: String!
  availableFrom: DateTime
  straNumber: String
}

enum ListingTypeEnum {
  earlyBird
  full
}

input AddressType {
  displayAddress: String!
  suburb: String!
  state: String!
  country: String!
  postalCode: Float!
  latitutde: Float!
  longitude: Float!
}

input InspectionDate {
  date: DateTime!
  startTime: String!
  endTime: String!
}

input AuctionDate {
  date: DateTime!
  startTime: String!
  endTime: String
}

input AddEarlyBirdInput {
  name: String
  description: String
  property: PropertyEnum!
  saleType: SaleTypeEnum!
  subSaleType: SubSaleTypeEnum
  type: String!
  address: AddressType
  videoUrl: String
  images: [String!]
  price: Float
  minPrice: Float
  maxPrice: Float
  priceUnit: PriceUnitEnum
  inspectionDates: [InspectionDate!]
  auctionDate: AuctionDate
  landSize: Float
  buildingSize: Float
  featureWords: [String!]
  lifeStyleWords: [String!]
  propertyType: [String!]!
  showPrice: Boolean
  bed: Float
  bath: Float
  car: Float
  pool: Float
  isVacant: Boolean
  isTenated: Boolean
  isPetAllowed: Boolean
  isFurnished: Boolean
  agentPriceGuideUrl: String
  councilZoning: String
  availableFrom: DateTime
  straNumber: String
}

input UpdateEarlyBirdInput {
  name: String
  description: String
  property: PropertyEnum!
  saleType: SaleTypeEnum!
  subSaleType: SubSaleTypeEnum
  type: String!
  address: AddressType
  videoUrl: String
  images: [String!]
  price: Float
  minPrice: Float
  maxPrice: Float
  priceUnit: PriceUnitEnum
  inspectionDates: [InspectionDate!]
  auctionDate: AuctionDate
  landSize: Float
  buildingSize: Float
  featureWords: [String!]
  lifeStyleWords: [String!]
  propertyType: [String!]!
  showPrice: Boolean
  bed: Float
  bath: Float
  car: Float
  pool: Float
  isVacant: Boolean
  isTenated: Boolean
  isPetAllowed: Boolean
  isFurnished: Boolean
  agentPriceGuideUrl: String
  councilZoning: String
  availableFrom: DateTime
  straNumber: String
  propertyId: String!
}

input UpdatePropertyInput {
  name: String
  description: String!
  listingType: ListingTypeEnum!
  property: PropertyEnum!
  saleType: SaleTypeEnum!
  subSaleType: SubSaleTypeEnum
  type: String!
  address: AddressType!
  videoUrl: String
  images: [String!]
  price: Float
  minPrice: Float
  maxPrice: Float
  showPrice: Boolean!
  priceUnit: PriceUnitEnum
  inspectionDates: [UpdateInspectionDate!]
  isInspectionByAppointment: Boolean
  auctionDate: AuctionDate
  landSize: Float
  buildingSize: Float
  featureWords: [String!]!
  lifeStyleWords: [String!]!
  propertyType: [String!]!
  isVacant: Boolean
  isTenated: Boolean
  isPetAllowed: Boolean!
  isFurnished: Boolean!
  bed: Float
  bath: Float
  car: Float
  pool: Float
  agentPriceGuideUrl: String
  councilZoning: String!
  availableFrom: DateTime
  straNumber: String
  propertyId: String!
}

input UpdateInspectionDate {
  date: DateTime!
  startTime: String!
  endTime: String!
}

input UpdatePropertyDescriptionInput {
  propertyId: String!
  description: String!
}

input UpdatePropertySettingInput {
  propertyId: String!
  status: PropertySettingEnum!
  soldPrice: Float
  showSoldPrice: Boolean
  leasedPriceUnit: PriceUnitEnum
}

enum PropertySettingEnum {
  live
  leased
  withdraw
  sold
  underOffer
  underContract
  reactivate
}

input InspectionDateInput {
  date: DateTime!
  startTime: String!
  endTime: String!
  inspectionId: String
  propertyId: String!
}

input RemoveInspectionDateInput {
  inspectionId: String!
  propertyId: String!
}

input AddBuyerCheckInInput {
  propertyId: String!
  buyerId: String!
  checkInDateTime: DateTime!
}

input PropertyReviewInput {
  propertyId: String!
  review: ReviewInputDetail!
}

input ReviewInputDetail {
  description: String!
  pricingEstimate: Float!
  reviews: [Review!]!
}

input Review {
  reviewOptionId: String!
  ratings: Float!
}

input EnquiryInput {
  propertyId: String!
  enquiry: String!
  message: String
}

input EnquiryGroupInput {
  propertyId: String!
  cometGroupId: String!
}

input IdInput {
  propertyId: String!
}

input SavePropertyInput {
  propertyId: String!
  collectionId: String
}

input RemoveSavedPropertyInput {
  propertyId: String!
}

input CollectionInput {
  title: String!
  collectionId: String
}

input RemoveCollectionInput {
  collectionId: String!
  includeProperty: Boolean!
}

input SaveSearchFilterInput {
  property: PropertyEnum
  saleType: SaleTypeEnum
  subSaleType: SubSaleTypeEnum
  showOnlySold: Boolean
  showOnlyLeased: Boolean
  minPrice: Float
  maxPrice: Float
  priceUnit: PriceUnitEnum
  includeUnderContract: Boolean
  bed: Float
  bath: Float
  car: Float
  minLandSize: Float
  maxLandSize: Float
  featureWords: [String!]
  lifeStyleWords: [String!]
  propertyType: [String!]
  minBuildingSize: Float
  maxBuildingSize: Float
  isPetAllowed: Boolean
  isFurnished: Boolean
  pool: Boolean
  title: String!
  address: [AddressForSaveSearchFilter!]
}

input AddressForSaveSearchFilter {
  suburb: String!
  displayAddress: String!
  stateFullName: String!
  stateShortName: String!
  country: String!
  postalCode: Float!
  latitude: Float!
  longitude: Float!
}

input DeleteSavedSearchInput {
  savedSearchId: String!
}

input AgentChangePasswordInput {
  oldPassword: String!
  newPassword: String!
}

input AgentUpdateInput {
  agentImage: String
  firstName: String!
  lastName: String!
  phoneNumber: String
}

input DeviceInfoInput {
  deviceType: Float!
  deviceName: String!
  pushNotificationToken: String
}

input EmailSignupOTPInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String!
}

input VerifyEmailInput {
  email: String!
  verificationCode: String!
}

input LoginEmailPasswordInput {
  email: String!
  password: String!
  deviceType: String = "mobile"
}

input ChangePasswordInput {
  password: String!
  new_password: String!
}

input UpdateUserProfile {
  firstName: String
  lastName: String
  address: AddressInput
}

input AddressInput {
  displayAddress: String!
  coordinates: CoordinatesInput!
}

input CoordinatesInput {
  lat: Float!
  long: Float!
}

input ForgotPasswordInput {
  email: String!
  userType: ForgotPasswordUserTypeEnum!
}

enum ForgotPasswordUserTypeEnum {
  agent
  buyer
}

input VerifyResetPasswordOtpInput {
  verificationCode: String!
  email: String!
  userType: ForgotPasswordUserTypeEnum!
}

input ResetPasswordInput {
  email: String
  password: String!
  userType: ForgotPasswordUserTypeEnum!
  userId: String
  token: String
}

input RequestLoginOTPInput {
  email: String!
  firstName: String
  lastName: String
}

enum AuthProviderType {
  google
  facebook
}

input RequestPhoneLoginOTPInput {
  dialCode: String!
  number: String!
  deviceId: String!
}

input PhoneLoginWithOTPInput {
  dialCode: String!
  number: String!
  deviceId: String!
  verificationCode: String!
}
